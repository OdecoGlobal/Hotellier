generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName          String    @default("NO_NAME")
  email             String    @unique(map: "user_email_idx")
  emailVerified     DateTime? @db.Timestamp(6)
  image             String?
  password          String?
  passwordChangedAt DateTime?
  role              Role      @default(USER)
  address           Json?     @db.Json
  paymentMethod     String?
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  updatedAt         DateTime  @updatedAt
  hotels            Hotel[]   @relation("OwnerHotels")
  // bookings  Booking[]
  // reviews   Review[]
}

enum Role {
  USER
  OWNER
  ADMIN
}

model Hotel {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @unique(map: "hotel_name_idx")
  slug          String         @unique(map: "hotel_slug_idx")
  description   String
  banner        String?
  ownerId       String         @db.Uuid
  state         String
  lga           String
  latitude      Float
  longitude     Float
  address       String
  services      String[]       @default([])
  locationBrief String
  rating        Decimal        @default(0) @db.Decimal(3, 2)
  numReviews    Int            @default(0)
  owner         User           @relation("OwnerHotels", fields: [ownerId], references: [id])
  room          Room[]
  hotelServices HotelService[]
  // bookings    Booking[]
  // reviews     Review[]
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
}

model HotelServiceType {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())

  hotelServices HotelService[]
}

model HotelService {
  id               String           @id @default(uuid())
  hotelId          String           @db.Uuid
  serviceTypeId    String           @db.Uuid
  available        Boolean          @default(false)
  price            Float?
  notes            String?
  hotel            Hotel            @relation(fields: [hotelId], references: [id])
  hotelServiceType HotelServiceType @relation(fields: [serviceTypeId], references: [id])

  @@unique([hotelId, serviceTypeId])
}

model RoomCategory {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
}

model Room {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique(map: "room_name_idx")
  category    String
  images      String[] @default([])
  hotelId     String   @db.Uuid
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  roomNumber  Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  isAvailable Boolean  @default(true)
  // bookings      Booking[]
}

/**
 * model User {
 * id        String   @id @default(uuid())
 * email     String   @unique
 * password  String
 * name      String
 * role      Role     @default(USER) // USER or OWNER
 * hotels    Hotel[]  @relation("OwnerHotels")
 * bookings  Booking[]
 * reviews   Review[]
 * createdAt DateTime @default(now())
 * }
 * enum Role {
 * USER
 * OWNER
 * }
 * model Hotel {
 * id          String         @id @default(uuid())
 * name        String
 * description String?
 * ownerId     String
 * state       String
 * lga         String
 * latitude    Float
 * longitude   Float
 * address     String
 * owner       User           @relation("OwnerHotels", fields: [ownerId], references: [id])
 * roomCategories RoomCategory[]
 * bookings    Booking[]
 * reviews     Review[]
 * createdAt   DateTime       @default(now())
 * }
 * model RoomCategory {
 * id          String   @id @default(uuid())
 * name        String
 * description String?
 * hotelId     String
 * hotel       Hotel    @relation(fields: [hotelId], references: [id])
 * rooms       Room[]
 * }
 * model Room {
 * id            String   @id @default(uuid())
 * categoryId    String
 * roomNumber    String
 * price         Float
 * available     Boolean  @default(true)
 * category      RoomCategory @relation(fields: [categoryId], references: [id])
 * bookings      Booking[]
 * }
 * model Booking {
 * id          String   @id @default(uuid())
 * userId      String
 * roomId      String
 * hotelId     String
 * checkIn     DateTime
 * checkOut    DateTime
 * status      BookingStatus @default(PENDING)
 * user        User     @relation(fields: [userId], references: [id])
 * room        Room     @relation(fields: [roomId], references: [id])
 * hotel       Hotel    @relation(fields: [hotelId], references: [id])
 * createdAt   DateTime @default(now())
 * }
 * enum BookingStatus {
 * PENDING
 * CONFIRMED
 * CANCELLED
 * COMPLETED
 * }
 * model Review {
 * id        String   @id @default(uuid())
 * userId    String
 * hotelId   String
 * rating    Int      // 1-5
 * comment   String?
 * user      User     @relation(fields: [userId], references: [id])
 * hotel     Hotel    @relation(fields: [hotelId], references: [id])
 * createdAt DateTime @default(now())
 * }
 * model StateLGA {
 * id      String   @id @default(uuid())
 * state   String
 * lga     String
 * }
 */
