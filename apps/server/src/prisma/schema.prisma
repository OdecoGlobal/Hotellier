generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName          String    @default("NO_NAME")
  email             String    @unique(map: "user_email_idx")
  emailVerified     DateTime? @db.Timestamp(6)
  image             String?
  password          String?
  passwordChangedAt DateTime?
  role              Role      @default(USER)
  address           Json?     @db.Json
  paymentMethod     String?
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  updatedAt         DateTime  @updatedAt
  hotels            Hotel[]   @relation("OwnerHotels")

  // bookings  Booking[]
  // reviews   Review[]
}

enum Role {
  USER
  OWNER
  ADMIN
}

model Hotel {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  status           HotelStatus @default(DRAFT)
  completionSteps  Json        @default("{}")
  currentStep      Int         @default(1)
  totalSteps       Int         @default(6)
  isFullyCompleted Boolean     @default(false)

  ownerId String @db.Uuid
  owner   User   @relation("OwnerHotels", fields: [ownerId], references: [id])

  basicInfo HotelBasicInfo?
  policies  HotelPolicy?
  rooms     Room[]
  rates     HotelRate[]
  amenities HotelAmenity[]

  // bookings    Booking[]
  // reviews     Review[]

  @@map("hotels")
}

model HotelBasicInfo {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId String @unique @db.Uuid
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  name   String  @unique(map: "hotel_name_idx")
  slug   String  @unique(map: "hotel_slug_idx")
  rating Decimal @default(0) @db.Decimal(3, 2)

  address   String
  city      String
  state     String
  country   String
  zipCode   String
  latitude  Float?
  longitude Float?

  images String[] @default([])

  isCompleted Boolean   @default(false)
  completedAt DateTime?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("hotel_basic_info")
}

model HotelPolicy {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId String @unique @db.Uuid
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  checkInTime      String
  checkOutTime     String
  lateCheckInFee   Float?
  earlyCheckOutFee Float?

  cancellationPolicy CancellationPolicy
  cancellationHours  Int
  cancellationFee    Float?

  childPolicy   String?
  petPolicy     PetPolicy     @default(NOT_ALLOWED)
  petFee        Float?
  smokingPolicy SmokingPolicy @default(NO_SMOKING)

  paymentMethods    PaymentMethod[]
  isDepositRequired Boolean         @default(false)
  depsoitAmount     Float?

  additionalPolicy Json @default("{}")

  isCompleted Boolean   @default(false)
  completedAt DateTime?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("hotel_policies")
}

model Room {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId String @db.Uuid
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  name              String   @unique(map: "room_name_idx")
  description       String?
  roomType          RoomType
  size              Float?
  maxOccupancy      Int
  bedConfigurations String

  amenities RoomAmenity[]
  images    String[]      @default([])

  totalRooms  Int     @default(1)
  isAvailable Boolean @default(true)

  basePrice Decimal @default(0) @db.Decimal(12, 2)
  currency  String  @default("NGN")

  isCompleted Boolean   @default(false)
  completedAt DateTime?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // bookings      Booking[]
  @@map("rooms")
}

model HotelRate {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId String @db.Uuid
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  name        String
  description String?
  rateType    RateType

  baseRate Decimal @default(0) @db.Decimal(12, 2)
  currency String  @default("NGN")

  validFrom DateTime
  validTo   DateTime

  minimumStay    Int?
  maximumStay    Int?
  advanceBooking Int?

  discountPercent Float? @default(0)
  markupPercent   Float? @default(0)

  applicableDays Int     @default(127)
  isActive       Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("hotel_rates")
}

model HotelAmenity {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId String @db.Uuid
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  amenityType  AmenityType
  name         String
  description  String?
  isChargeable Boolean     @default(false)
  charge       Float?
  isActive     Boolean     @default(true)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("hotel_amenities")
}

model RoomAmenity {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId String @db.Uuid
  room   Room   @relation(fields: [roomId], references: [id])

  name     String
  category String
  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@map("room_amenities")
}

// ENUMS
enum HotelStatus {
  DRAFT
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum HotelCategory {
  BUDGET
  BUSINESS
  LUXURY
  RESORT
  BOUTIQUE
  EXTENDED_STAY
}

enum CancellationPolicy {
  FREE_CANCELLATION
  MODERATE
  STRICT
  SUPER_STRICT
}

enum PetPolicy {
  NOT_ALLOWED
  ALLOWED_WITH_FEE
  ALLOWED_FREE
}

enum SmokingPolicy {
  NO_SMOKING
  SMOKING_ALLOWED
  DESIGNATED_AREAS
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  FAMILY
  EXECUTIVE
  PRESIDENTIAL
}

enum RateType {
  STANDARD
  WEEKEND
  SEASONAL
  PROMOTIONAL
  CORPORATE
  GROUP
}

enum AmenityType {
  DINING
  RECREATION
  BUSINESS
  WELLNESS
  TRANSPORTATION
  CONNECTIVITY
  SERVICES
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

/**
 * model Booking {
 * id        String        @id @default(cuid())
 * hotelId   String
 * hotel     Hotel         @relation(fields: [hotelId], references: [id])
 * roomId    String
 * room      Room          @relation(fields: [roomId], references: [id])
 * checkIn   DateTime
 * checkOut  DateTime
 * guests    Int
 * status    BookingStatus @default(PENDING)
 * createdAt DateTime      @default(now())
 * updatedAt DateTime      @updatedAt
 * @@map("bookings")
 * }
 * model Booking {
 * id          String   @id @default(uuid())
 * userId      String
 * roomId      String
 * hotelId     String
 * checkIn     DateTime
 * checkOut    DateTime
 * status      BookingStatus @default(PENDING)
 * user        User     @relation(fields: [userId], references: [id])
 * room        Room     @relation(fields: [roomId], references: [id])
 * hotel       Hotel    @relation(fields: [hotelId], references: [id])
 * createdAt   DateTime @default(now())
 * }
 * enum BookingStatus {
 * PENDING
 * CONFIRMED
 * CANCELLED
 * COMPLETED
 * }
 * model Review {
 * id        String   @id @default(uuid())
 * userId    String
 * hotelId   String
 * rating    Int      // 1-5
 * comment   String?
 * user      User     @relation(fields: [userId], references: [id])
 * hotel     Hotel    @relation(fields: [hotelId], references: [id])
 * createdAt DateTime @default(now())
 * }
 * model StateLGA {
 * id      String   @id @default(uuid())
 * state   String
 * lga     String
 * }
 */
